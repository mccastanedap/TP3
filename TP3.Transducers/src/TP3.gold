using gold.structures.automaton.*
using gold.visualization.automaton.*

procedure main(args:String[]) begin
    lexer = createTransducer()
	 testLexer(lexer)
end
  
        

procedure testLexer(M:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
	
	while true do
		print "----------------------------"
		print "Enter an input string: "
		string:=""
		cond:=true
		while cond==true do
			a:= sc.nextLine().toString()
			if(a!="") then 
				string:=string+a+" "   //We add a space (which is also a separator to the end of the string)
			else
				cond=false
				print string
			end
			
		end
		result:=M.acceptsString(string)    
			tokenStream := M.getOutputString()
			print "The lexer did "+(result?"":"not ")+" accept the string."
			if result then print "Token Stream: "+ tokenStream end		
	end
end

 


var names
  
function createTransducer():ITransducer begin
	// Lexer: reads a string with lower casae letters, digits, parenthesis, and spaces.
	// outputs a string of {'(',')','+','*','v','n'}
Q:={"I","K","E","o","f","s","S","T","p","q","R","N", "P", "D" ,"extends", "super", "parametros"}∪{"ERROR", "Init"}∪{⟨x,y⟩|x ∈ ('a'‥'z'),y ∈ ('a'‥'z')}∪{⟨x,y⟩|x='o',y='-'}∪{⟨x,y⟩|x='o',y='f'}

Σ:=('A'‥'Z')∪('a'‥'z')∪('0'‥'9')∪{'(',')',',','_',' ',';', '=', '{', '}', '.'}
Out:={'C', 'E', 'o', 'f', 's', 'p','a','i','r', 'S','u','p', 'T','h', 'M', 'R','N', 'v','n', '=',':','q', '$', ' ', '{', '}', '.', '(', ')', 'P', 'D'} 
∪('0'‥'9')
q:="Init"
F:={"Init"}∪{"ERROR"}
 
	return GDeterministicTransducer(Q,Σ,Out,q,F,δ,g,h)
end

function δ(q,σ) begin
	if (q == "ERROR") then return "ERROR"
	elseif q="extends" and σ!='{'  then return "extends"
	elseif q="extends" and σ=='{'  then return "Init" 
	elseif q="super" and σ!=')'  then return "super"
	elseif q="super" and σ==')'  then return "Init"
	elseif σ=='(' then return "parametros" 
	elseif q="parametros" and σ=='o'  then return ⟨'o','-'⟩
	elseif  σ ∈ {'(',')',' ', '\n' , ',' , '\t' , ';', '=', '{', '}', '.', '(', ')' } ∪('0'‥'9') then return "Init"
	elseif σ=='E' then return "extends"
	elseif σ=='S' then return "super"
	
	elseif (q="Init" or q="K" or q="E" or q="o" or q="f" or q="s" or q="S" or q="T" or
		q="p" or q="q" or q="R" or	q="N" or q="P" or q="D" ) and σ ∈{'I','K','o','f','s','S','T','p','q','R','N', 'P'}
		then return σ+""		
	
	
	else return "ERROR"
		
	end
	
end 

function δ(⟨x,y⟩,σ) begin
	if σ==',' then return "parametros"
	elseif ⟨x,y⟩==⟨'o','-'⟩ then return '='
	elseif ⟨x,y⟩==⟨'o','-'⟩ and σ∉{'\n','\t','=', '_',' ', ':', ';','(', ')', '{', '}', '.' }∪('0'‥'9')∪('A'‥'Z') then return ⟨x,σ⟩
	//elseif σ==')'then return "Init"
	
	else return "ERROR"
	end
end


function g(q) begin
	if(q=="o") then return 'D' end
		
	if q=="extends"  then return λ
	elseif q=="super" then return λ
	//elseif q=="parametros" then return '('
	end
	return λ
end
function h(⟨x,y⟩,σ) begin
	if σ==')' then return ')'
		
		
	else return λ
		
	end
end

function g(⟨x,y⟩) begin
	if y!='-' then return y+x
		
	else return  λ
		
	end
end

function h(q,σ) begin
		var s: String
		s:= λ
		
		if q=="ERROR" then return "$"
			
		
		elseif σ∈{' ',',','\n','\t',';',':', ' ', '=', '{', '}', '.', '(', ')'} ∪('0'‥'9')then
			if σ∉{'\n','\t'} then s:=String.valueOf(σ) end
			
			if σ==',' or σ==';' then s:= λ end
			
			if σ==' ' then s:= ' ' end
			
			if q=="Init" then return s
				
			elseif q=="K" then return 'C'+s
				
				
			elseif q=="E" then return 'E'+s
				
			elseif q=="o" then return s
				
			//elseif q=="o" then return 'o'+s	
				
			elseif q=="f" then return 'f'+s
				
			elseif q=="s" then return 's'+s
				
			elseif q=="S" then return 'S'+s
				
			elseif q=="T" then return 'T'+s
				
			elseif q=="p" then return 'p'+s
				
			elseif q=="P" then return 'p'+s
				
			elseif q=="q" then return 'q'+s	
				
			elseif q=="N" then return 'n'+s	
				
			elseif q=="R" then return 'R'+s
			
			elseif q=="extends" and σ=='{'then return '{'
			elseif q=="extends" then return λ
			elseif q=="super" then return λ
			elseif q=="parametros" then return λ

			
			else return 'v'+s
				
			end
			
		else return λ
			
		end
end




